
package scanner;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import static scanner.Token.COMENTARIO;
import static scanner.Token.IDENTIFICADOR;
import static scanner.Token.LITERAL;
import static scanner.Token.VERBO;
import static scanner.Token.PALABRA_RESERVADA;
import static scanner.Token.PRONOMBRE;
import static scanner.Token.PUNTO;
import static scanner.Token.SIGNO_PREGUNTA_ABRE;
import static scanner.Token.SIGNO_PREGUNTA_CIERRA;


public class Interfaz extends javax.swing.JFrame {

    
    private final JFileChooser fileChooser = new JFileChooser();
    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TextoResultado = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextoAnalizar = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        TextoError = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        TextoResultado.setColumns(20);
        TextoResultado.setRows(5);
        jScrollPane1.setViewportView(TextoResultado);

        jButton1.setText("Analizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        TextoAnalizar.setColumns(20);
        TextoAnalizar.setRows(5);
        jScrollPane2.setViewportView(TextoAnalizar);

        TextoError.setColumns(20);
        TextoError.setRows(5);
        jScrollPane3.setViewportView(TextoError);

        jLabel1.setText("Abrir archivo: ");

        jButton2.setText("Buscar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Texto:");

        jLabel3.setText("Resultado:");

        jLabel4.setText("Errores:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 233, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(231, 231, 231))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1)))
                        .addGap(10, 10, 10)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            analizarTexto();
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int res = fileChooser.showDialog(Interfaz.this, "Abrir archivo");
        File file = fileChooser.getSelectedFile();
        String path = file.getPath();
        String fileText;
        jTextField1.setText(path);
        try {
            BufferedReader reader = new BufferedReader(new FileReader(file));
            StringBuilder builder = new StringBuilder();
            String line;
            while((line = reader.readLine())!= null){
                builder.append(line);
                builder.append(System.lineSeparator());
            }
            fileText = builder.toString();
            TextoAnalizar.setText(fileText);
        } catch (Exception e) {
            
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }
    
    
    private void analizarTexto() throws IOException {
        File file = new File("Input.txt"); /*Crea un archivo de texto, es donde se almacena el resultado*/
        PrintWriter writer;
        try {
            writer = new PrintWriter(file);
            writer.print(TextoAnalizar.getText()); /*Escribe lo que quiero scanear*/
            writer.close();
        } catch (Exception e) {
        }
        BufferedReader reader = new BufferedReader(new FileReader(file));
        Lexer lexer = new Lexer(reader);  /*Abre el archivo, carga el contenido del txt*/
        String result = "";
        String error="";
        Lista resultado = new Lista();
        while (true) {
            Token token = lexer.yylex(); /*Para evaluar caracter por caracter cada uno de los símbolos
            que se ingresaron*/
            if (token == null) {
                TextoResultado.setText(result);
                TextoError.setText(error);
                return;
            } else {
                switch (token) {
                    case NOMBRE_PROPIO:
                        resultado.encolar(lexer.text, "NOMBRE_PROPIO", lexer.line);
                        break;
                    case COMENTARIO:
                        resultado.encolar(lexer.text,"COMENTARIO",lexer.line);
                        //Los comentarios no deben venir en el listado de tokens del sistema
                        //System.out.println("Comentario: " + lexer.text + ", en línea: " + lexer.line + ", columna: " + lexer.column + "\n\r");
                        break;
                    case IDENTIFICADOR:
                        resultado.encolar(lexer.text,"IDENTIFICADOR",lexer.line);
                        //result+= "Identificador: " + lexer.text + ", en línea: " + lexer.line + ", columna: " + lexer.column + "\n\r";
                        break;
                    case LITERAL:
                        resultado.encolar(lexer.text,"LITERAL",lexer.line);
                       // result+= "Literal: " + lexer.text + ", en línea: " + lexer.line + ", columna: " + lexer.column + "\n\r";
                        break;
                    case PALABRA_RESERVADA:
                        resultado.encolar(lexer.text,"PALABRA_RESERVADA",lexer.line);
                        //result+= "Palabra Reservada: " + lexer.text + ", en línea: " + lexer.line + ", columna: " + lexer.column + "\n\r";
                        break;
                    case VERBO:
                        resultado.encolar(lexer.text, "VERBO", lexer.line);
                        break;
                    case PRONOMBRE:
                        resultado.encolar(lexer.text, "PRONOMBRE", lexer.line);
                        break;
                    case SUSTANTIVO:
                        resultado.encolar(lexer.text, "SUSTANTIVO", lexer.line);
                        break;
                    case ADJETIVO:
                        resultado.encolar(lexer.text, "ADJETIVO", lexer.line);
                        break;
                    case ADVERBIO:
                        resultado.encolar(lexer.text, "ADVERBIO", lexer.line);
                        break;
                    case PREPOSICION:
                        resultado.encolar(lexer.text, "PREPOSICION", lexer.line);
                        break;
                    case ARTICULO:
                        resultado.encolar(lexer.text, "ARTICULO", lexer.line);
                        break;
                    case SIGNO_PREGUNTA_ABRE:
                        resultado.encolar(lexer.text, "SIGNO_PREGUNTA_ABRE", lexer.line);
                        break;
                    case SIGNO_PREGUNTA_CIERRA:
                        resultado.encolar(lexer.text, "SIGNO_PREGUNTA_CIERRA", lexer.line);
                        break;
                    case PUNTO:
                        resultado.encolar(lexer.text, "PUNTO", lexer.line);
                        break;
                    case COMA:
                        resultado.encolar(lexer.text, "COMA", lexer.line);
                        break;
                    case ERROR:
                        //resultado.encolar(lexer.text,"ERROR",lexer.line);
                        error+="Token =" + lexer.text + ", Tipo de Token = ERROR" + ", Línea =" + lexer.line+",Columna ="+ lexer.column +"\n\r";
                        break;
                        
                }
            }
            result = resultado.toString();
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea TextoAnalizar;
    private javax.swing.JTextArea TextoError;
    private javax.swing.JTextArea TextoResultado;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
